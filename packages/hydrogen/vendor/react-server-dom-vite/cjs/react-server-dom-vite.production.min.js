/**
 * @license React
 * react-server-dom-vite.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';
var g = {stream: !0},
  h = {__INJECTED_CLIENT_IMPORTERS__: null};
'undefined' !== typeof jest && (global.allClientComponents = h);
function k(a) {
  var b = h[a];
  return b
    ? 'function' === typeof b
      ? b()
      : Promise.resolve(b)
    : Promise.reject(Error('Could not find client component ' + a));
}
var m = new Map();
function n(a) {
  function b(a) {
    m.set(c, a);
    return a;
  }
  var c = a.id;
  m.has(c) || ((a = k(c)), b(a), a.then(b, b));
}
var p = 60103,
  q = 60116;
if ('function' === typeof Symbol && Symbol.for) {
  var r = Symbol.for;
  p = r('react.element');
  q = r('react.lazy');
}
function u(a, b, c) {
  this._status = a;
  this._value = b;
  this._response = c;
}
u.prototype.then = function (a) {
  0 === this._status
    ? (null === this._value && (this._value = []), this._value.push(a))
    : a();
};
function v(a) {
  switch (a._status) {
    case 3:
      return a._value;
    case 1:
      var b = JSON.parse(a._value, a._response._fromJSON);
      a._status = 3;
      return (a._value = b);
    case 2:
      var c = a._value;
      b = c.name;
      c = m.get(c.id);
      if (!c || c instanceof Promise || c instanceof Error) throw c;
      b = c[b];
      a._status = 3;
      return (a._value = b);
    case 0:
      throw a;
    default:
      throw a._value;
  }
}
function w() {
  var a = x(this, 0);
  return v(a);
}
function y(a, b) {
  return new u(3, b, a);
}
function z(a) {
  if (null !== a) for (var b = 0; b < a.length; b++) (0, a[b])();
}
function A(a, b) {
  if (0 === a._status) {
    var c = a._value;
    a._status = 4;
    a._value = b;
    z(c);
  }
}
function B(a, b) {
  a._chunks.forEach(function (a) {
    A(a, b);
  });
}
function x(a, b) {
  var c = a._chunks,
    d = c.get(b);
  d || ((d = new u(0, null, a)), c.set(b, d));
  return d;
}
function C(a, b, c) {
  switch (c[0]) {
    case '$':
      if ('$' === c) return p;
      if ('$' === c[1] || '@' === c[1]) return c.substring(1);
      b = parseInt(c.substring(1), 16);
      a = x(a, b);
      return v(a);
    case '@':
      return (
        (b = parseInt(c.substring(1), 16)),
        (a = x(a, b)),
        {$$typeof: q, _payload: a, _init: v}
      );
  }
  return c;
}
function D(a) {
  B(a, Error('Connection closed.'));
}
function E(a, b) {
  if ('' !== b) {
    var c = b[0],
      d = b.indexOf(':', 1),
      e = parseInt(b.substring(1, d), 16);
    b = b.substring(d + 1);
    switch (c) {
      case 'J':
        d = a._chunks;
        (c = d.get(e))
          ? 0 === c._status &&
            ((a = c._value), (c._status = 1), (c._value = b), z(a))
          : d.set(e, new u(1, b, a));
        break;
      case 'M':
        d = a._chunks;
        c = d.get(e);
        b = JSON.parse(b, a._fromJSON);
        n(b);
        c
          ? 0 === c._status &&
            ((a = c._value), (c._status = 2), (c._value = b), z(a))
          : d.set(e, new u(2, b, a));
        break;
      case 'S':
        b = JSON.parse(b);
        a._chunks.set(e, y(a, Symbol.for(b)));
        break;
      case 'E':
        c = JSON.parse(b);
        b = Error(c.message);
        b.stack = c.stack;
        c = a._chunks;
        (d = c.get(e)) ? A(d, b) : c.set(e, new u(4, b, a));
        break;
      default:
        throw Error(
          "Error parsing the data. It's probably an error code or network corruption."
        );
    }
  }
}
function F(a) {
  return function (b, c) {
    return 'string' === typeof c
      ? C(a, this, c)
      : 'object' === typeof c && null !== c
      ? ((b =
          c[0] === p
            ? {
                $$typeof: p,
                type: c[1],
                key: c[2],
                ref: null,
                props: c[3],
                _owner: null,
              }
            : c),
        b)
      : c;
  };
}
function G() {
  var a = new TextDecoder();
  a = {_chunks: new Map(), readRoot: w, _partialRow: '', _stringDecoder: a};
  a._fromJSON = F(a);
  return a;
}
function H(a, b) {
  function c(b) {
    var l = b.value;
    if (b.done) D(a);
    else {
      b = l;
      l = a._stringDecoder;
      for (var f = b.indexOf(10); -1 < f; ) {
        var I = a._partialRow;
        var t = b.subarray(0, f);
        t = l.decode(t);
        E(a, I + t);
        a._partialRow = '';
        b = b.subarray(f + 1);
        f = b.indexOf(10);
      }
      a._partialRow += l.decode(b, g);
      return e.read().then(c, d);
    }
  }
  function d(b) {
    B(a, b);
  }
  var e = b.getReader();
  e.read().then(c, d);
}
exports.createFromFetch = function (a) {
  var b = G();
  a.then(
    function (a) {
      H(b, a.body);
    },
    function (a) {
      B(b, a);
    }
  );
  return b;
};
exports.createFromReadableStream = function (a) {
  var b = G();
  H(b, a);
  return b;
};
exports.createFromXHR = function (a) {
  function b() {
    for (var b = a.responseText, c = e, f = b.indexOf('\n', c); -1 < f; )
      (c = d._partialRow + b.substring(c, f)),
        E(d, c),
        (d._partialRow = ''),
        (c = f + 1),
        (f = b.indexOf('\n', c));
    d._partialRow += b.substring(c);
    e = b.length;
  }
  function c() {
    B(d, new TypeError('Network error'));
  }
  var d = G(),
    e = 0;
  a.addEventListener('progress', b);
  a.addEventListener('load', function () {
    b();
    D(d);
  });
  a.addEventListener('error', c);
  a.addEventListener('abort', c);
  a.addEventListener('timeout', c);
  return d;
};
