"use strict";(self.webpackChunkdocs_v_1=self.webpackChunkdocs_v_1||[]).push([[787],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var o=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),g=a,y=d["".concat(s,".").concat(g)]||d[g]||u[g]||r;return t?o.createElement(y,l(l({ref:n},p),{},{components:t})):o.createElement(y,l({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6849:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=t(8168),a=(t(6540),t(5680));const r={},l="Build a collection page",i={unversionedId:"tutorials/getting-started/tutorial/collections",id:"tutorials/getting-started/tutorial/collections",title:"Build a collection page",description:"Hydrogen 2.0 is out now. These archival Hydrogen 1.0 docs are provided only to assist developers during their upgrade process. Please migrate as soon as possible.",source:"@site/docs/tutorials/getting-started/tutorial/collections.md",sourceDirName:"tutorials/getting-started/tutorial",slug:"/tutorials/getting-started/tutorial/collections",permalink:"/hydrogen-v1/tutorials/getting-started/tutorial/collections",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"hydrogen",previous:{title:"Build a cart",permalink:"/hydrogen-v1/tutorials/getting-started/tutorial/cart"},next:{title:"Fetch storefront data",permalink:"/hydrogen-v1/tutorials/getting-started/tutorial/fetch-data"}},s={},c=[{value:"Scenario",id:"scenario",level:2},{value:"What you\u2019ll learn",id:"what-youll-learn",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Sample code",id:"sample-code",level:2},{value:"Step 1: Create a collections route",id:"step-1-create-a-collections-route",level:2},{value:"Step 2: Query a collection by handle",id:"step-2-query-a-collection-by-handle",level:2},{value:"Step 3: Generate SEO tags and implement Shopify Analytics",id:"step-3-generate-seo-tags-and-implement-shopify-analytics",level:2},{value:"Step 4: Query products and variants",id:"step-4-query-products-and-variants",level:2},{value:"Next steps",id:"next-steps",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(d,(0,o.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"build-a-collection-page"},"Build a collection page"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Hydrogen 2.0 is out now. These archival Hydrogen 1.0 docs are provided only to assist developers during their upgrade process. Please ",(0,a.yg)("a",{parentName:"p",href:"/migrate"},"migrate")," as soon as possible.")),(0,a.yg)("p",null,"Previously, you ",(0,a.yg)("a",{parentName:"p",href:"/tutorials/getting-started/tutorial/fetch-data/"},"fetched data from your storefront"),", including your store\u2019s name and collections. Your home page is rendering a featured collections section. You\u2019re now ready to build a collection page."),(0,a.yg)("p",null,"In this tutorial, you'll build a page that renders a collection and products that belong to the collection."),(0,a.yg)("h2",{id:"scenario"},"Scenario"),(0,a.yg)("p",null,"You want to present a grouping of products on your storefront. For example, you might have a collection for a specific type of product that you sell, such as snowboards. Collections help you organize your products and make it easier for customers to browse your store."),(0,a.yg)("h2",{id:"what-youll-learn"},"What you\u2019ll learn"),(0,a.yg)("p",null,"In this tutorial, you\u2019ll learn how to do the following tasks:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Create a collections route to familiarize yourself with Hydrogen\u2019s file-based routing system."),(0,a.yg)("li",{parentName:"ul"},"Query collections by their handle."),(0,a.yg)("li",{parentName:"ul"},"Generate SEO tags for collection pages."),(0,a.yg)("li",{parentName:"ul"},"Implement Shopify Analytics on collection pages."),(0,a.yg)("li",{parentName:"ul"},"Fetch products that belong to a collection.")),(0,a.yg)("video",{autoplay:!0,muted:!0,loop:!0,controls:!0},(0,a.yg)("source",{src:"https://shopify.dev/assets/custom-storefronts/hydrogen/build-a-collection-page.mp4"})),(0,a.yg)("h2",{id:"requirements"},"Requirements"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"You\u2019ve completed ",(0,a.yg)("a",{parentName:"li",href:"/tutorials/getting-started/tutorial/fetch-data/"},"Fetch storefront data"),".")),(0,a.yg)("h2",{id:"sample-code"},"Sample code"),(0,a.yg)("p",null,"If you want to quickly get started, then you can copy and paste the following code from each file into the corresponding files in your Hydrogen app. If the file doesn\u2019t yet exist, then you can create it in your Hydrogen app. This tutorial describes the sample code step by step:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/routes/collections/[handle].server.jsx\n\nimport {\n  gql,\n  useShopQuery,\n  useRouteParams,\n  useServerAnalytics,\n  ShopifyAnalyticsConstants,\n  Seo,\n} from "@shopify/hydrogen";\n\nimport { Layout } from "../../components/Layout.server";\nimport ProductCard from "../../components/ProductCard.server";\nimport { Suspense } from "react";\n\nexport default function Collection() {\n  const { handle } = useRouteParams();\n\n  const {\n    data: { collection },\n  } = useShopQuery({\n    query: QUERY,\n    variables: {\n      handle,\n    },\n  });\n\n  useServerAnalytics({\n    shopify: {\n      pageType: ShopifyAnalyticsConstants.pageType.collection,\n      resourceId: collection.id,\n    },\n  });\n\n  return (\n    <Layout>\n      <Suspense>\n        <Seo type="collection" data={collection} />\n      </Suspense>\n      <header className="grid w-full gap-8 p-4 py-8 md:p-8 lg:p-12 justify-items-start">\n        <h1 className="text-4xl whitespace-pre-wrap font-bold inline-block">\n          {collection.title}\n        </h1>\n\n        {collection.description && (\n          <div className="flex items-baseline justify-between w-full">\n            <div>\n              <p className="max-w-md whitespace-pre-wrap inherit text-copy inline-block">\n                {collection.description}\n              </p>\n            </div>\n          </div>\n        )}\n      </header>\n\n      <section className="w-full gap-4 md:gap-8 grid p-6 md:p-8 lg:p-12">\n        <div className="grid-flow-row grid gap-2 gap-y-6 md:gap-4 lg:gap-6 grid-cols-2 md:grid-cols-3 lg:grid-cols-4">\n          {collection.products.nodes.map((product) => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n        </div>\n      </section>\n    </Layout>\n  );\n}\n\nconst QUERY = gql`\n  query CollectionDetails($handle: String!) {\n    collection(handle: $handle) {\n      id\n      title\n      description\n      seo {\n        description\n        title\n      }\n      image {\n        id\n        url\n        width\n        height\n        altText\n      }\n      products(first: 8) {\n        nodes {\n          id\n          title\n          publishedAt\n          handle\n          variants(first: 1) {\n            nodes {\n              id\n              image {\n                url\n                altText\n                width\n                height\n              }\n              priceV2 {\n                amount\n                currencyCode\n              }\n              compareAtPriceV2 {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript?filename:",metastring:"'/src/components/ProductCard.server.jsx', title: 'ProductCard'","'/src/components/ProductCard.server.jsx',":!0,"title:":!0,"'ProductCard'":!0},'import { Link, Image, Money } from "@shopify/hydrogen";\n\nexport default function ProductCard({ product }) {\n  const { priceV2: price, compareAtPriceV2: compareAtPrice } =\n    product.variants?.nodes[0] || {};\n\n  const isDiscounted = compareAtPrice?.amount > price?.amount;\n\n  return (\n    <Link to={`/products/${product.handle}`}>\n      <div className="grid gap-6">\n        <div className="shadow-sm rounded relative">\n          {isDiscounted && (\n            <label className="subpixel-antialiased absolute top-0 right-0 m-4 text-right text-notice text-red-600 text-xs">\n              Sale\n            </label>\n          )}\n          <Image\n            className="aspect-[4/5]"\n            data={product.variants.nodes[0].image}\n            alt="Alt Tag"\n          />\n        </div>\n        <div className="grid gap-1">\n          <h3 className="max-w-prose text-copy w-full overflow-hidden whitespace-nowrap text-ellipsis ">\n            {product.title}\n          </h3>\n          <div className="flex gap-4">\n            <span className="max-w-prose whitespace-pre-wrap inherit text-copy flex gap-4">\n              <Money withoutTrailingZeros data={price} />\n              {isDiscounted && (\n                <Money\n                  className="line-through opacity-50"\n                  withoutTrailingZeros\n                  data={compareAtPrice}\n                />\n              )}\n            </span>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n')),(0,a.yg)("h2",{id:"step-1-create-a-collections-route"},"Step 1: Create a collections route"),(0,a.yg)("p",null,"All components added to the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/routes")," directory in your Hydrogen app are ",(0,a.yg)("a",{parentName:"p",href:"/tutorials/routing/"},"registered as routes"),". Any filenames with brackets, like ",(0,a.yg)("inlineCode",{parentName:"p"},"[handle]"),", are converted to a route parameter called ",(0,a.yg)("inlineCode",{parentName:"p"},":handle"),"."),(0,a.yg)("p",null,"To begin building your collection page, create a file called ",(0,a.yg)("inlineCode",{parentName:"p"},"/src/routes/collections/[handle].server.jsx")," to register a new collections route. Then, display the dynamic handle on the page within the layout component."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/routes/collections/[handle].server.jsx\n\nimport { useRouteParams } from "@shopify/hydrogen";\n\nimport { Layout } from "../../components/Layout.server";\n\nexport default function Collection() {\n  const { handle } = useRouteParams();\n  return (\n    <Layout>\n      <section className="p-6 md:p-8 lg:p-12">\n        This will be the collection page for <strong>{handle}</strong>\n      </section>\n    </Layout>\n  );\n}\n')),(0,a.yg)("p",null,"The collections route is registered. Clicking a featured collection from the home page takes you to a dynamic collection page:"),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/dynamic-collection-page.png",alt:"A dynamic collection page"})),(0,a.yg)("h2",{id:"step-2-query-a-collection-by-handle"},"Step 2: Query a collection by handle"),(0,a.yg)("p",null,"You can use a collection\u2019s handle to query a collection. A handle is a unique string that identifies a resource, such as a collection. If a handle isn't specified when a collection is created, then the handle is generated from the collection's original title, replacing any spaces with hyphens. For example, a collection that was created with the title ",(0,a.yg)("strong",{parentName:"p"},"Freestyle collection")," might have the handle ",(0,a.yg)("strong",{parentName:"p"},"freestyle-collection"),"."),(0,a.yg)("p",null,"In ",(0,a.yg)("inlineCode",{parentName:"p"},"/src/routes/collections/[handle].server.jsx"),", add a GraphQL query that retrieves a collection by its handle:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/routes/collections/[handle].server.jsx\n\nimport { gql, useShopQuery, useRouteParams } from "@shopify/hydrogen";\n\nimport { Layout } from "../../components/Layout.server";\n\nexport default function Collection() {\n  const { handle } = useRouteParams();\n\n  const {\n    data: { collection },\n  } = useShopQuery({\n    query: QUERY,\n    variables: {\n      handle,\n    },\n  });\n\n  return (\n    <Layout>\n      <section className="p-6 md:p-8 lg:p-12">\n        This will be the collection page for <strong>{collection.title}</strong>\n      </section>\n    </Layout>\n  );\n}\n\n// Add a Graphql query that retrieves a collection by its handle.\nconst QUERY = gql`\n  query CollectionDetails($handle: String!) {\n    collection(handle: $handle) {\n      title\n    }\n  }\n`;\n')),(0,a.yg)("p",null,"The collection page renders the following dynamic content:"),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/dynamic-content-collections.png",alt:"Dynamic content on the collection page"})),(0,a.yg)("h2",{id:"step-3-generate-seo-tags-and-implement-shopify-analytics"},"Step 3: Generate SEO tags and implement Shopify Analytics"),(0,a.yg)("p",null,"In ",(0,a.yg)("a",{parentName:"p",href:"/hydrogen-v1/tutorials/getting-started/tutorial/fetch-data#step-3-generate-seo-tags"},"Step 4 of the previous tutorial"),", you added an SEO component to your Layout component, which allowed you to generate a series of default SEO tags in the ",(0,a.yg)("inlineCode",{parentName:"p"},"<head>")," tag. In this step, you'll generate SEO tags that are specific to the collections page."),(0,a.yg)("p",null,"You'll also implement ",(0,a.yg)("a",{parentName:"p",href:"/components/framework/shopifyanalytics/"},"Shopify Analytics")," to send commerce-related analytics to Shopify. By adding the ",(0,a.yg)("inlineCode",{parentName:"p"},"ShopifyAnalytics")," component to your Hydrogen storefront, you can view key sales, orders, and online store visitor data from the ",(0,a.yg)("a",{parentName:"p",href:"https://help.shopify.com/en/manual/reports-and-analytics/shopify-reports/overview-dashboard/"},"Analytics dashboard in your Shopify admin"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/routes/collections/[handle].server.jsx\n\nimport {\n  gql,\n  useShopQuery,\n  Seo,\n  useServerAnalytics,\n  useRouteParams,\n  ShopifyAnalyticsConstants,\n} from "@shopify/hydrogen";\nimport { Suspense } from "react";\n\nimport { Layout } from "../../components/Layout.server";\n\nexport default function Collection() {\n  const { handle } = useRouteParams();\n\n  const {\n    data: { collection },\n  } = useShopQuery({\n    query: QUERY,\n    variables: {\n      handle,\n    },\n  });\n\n  useServerAnalytics({\n    shopify: {\n      pageType: ShopifyAnalyticsConstants.pageType.collection,\n      resourceId: collection.id,\n    },\n  });\n\n  return (\n    <Layout>\n      <Suspense>\n        <Seo type="collection" data={collection} />\n      </Suspense>\n      <header className="grid w-full gap-8 p-4 py-8 md:p-8 lg:p-12 justify-items-start">\n        <h1 className="text-4xl whitespace-pre-wrap font-bold inline-block">\n          {collection.title}\n        </h1>\n\n        {collection.description && (\n          <div className="flex items-baseline justify-between w-full">\n            <div>\n              <p className="max-w-md whitespace-pre-wrap inherit text-copy inline-block">\n                {collection.description}\n              </p>\n            </div>\n          </div>\n        )}\n      </header>\n    </Layout>\n  );\n}\n\n// The `Seo` component uses the collection\'s `seo` values, if specified. If not\n// specified, then the component falls back to using the collection\'s `title` and `description`.\nconst QUERY = gql`\n  query CollectionDetails($handle: String!) {\n    collection(handle: $handle) {\n      id\n      title\n      description\n      seo {\n        description\n        title\n      }\n    }\n  }\n`;\n')),(0,a.yg)("p",null,"If you inspect the dynamic collection page, then you can find the collection SEO tags that have been added into the ",(0,a.yg)("inlineCode",{parentName:"p"},"<head>")," tag. The collection's title and description display on the page:"),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/registered-collections-route.png",alt:"The title and description of a collection"})),(0,a.yg)("h2",{id:"step-4-query-products-and-variants"},"Step 4: Query products and variants"),(0,a.yg)("p",null,"Products are the goods, digital downloads, services, and gift cards that a merchant sells. If a product has options, like size or color, then merchants can add a variant for each combination of options. For example, a snowboard might be available for purchase in blue and green. The blue snowboard and the green snowboard are variants."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Tip:\nIn the following code samples, you\u2019ll notice a reference to a ",(0,a.yg)("a",{parentName:"p",href:"/components/primitive/money/"},(0,a.yg)("inlineCode",{parentName:"a"},"Money"))," component. The ",(0,a.yg)("inlineCode",{parentName:"p"},"Money")," component renders a string of the Storefront API's ",(0,a.yg)("a",{parentName:"p",href:"https://shopify.dev/api/storefront/reference/common-objects/moneyv2/"},"MoneyV2 object")," according to the ",(0,a.yg)("inlineCode",{parentName:"p"},"defaultLocale")," in the ",(0,a.yg)("a",{parentName:"p",href:"/tutorials/configuration/"},"Hydrogen configuration file"),".")),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create a ",(0,a.yg)("inlineCode",{parentName:"p"},"ProductCard")," component to display the title, price, and image of each product within the collection:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/ProductCard.server.jsx\n\nimport { Link, Image, Money } from "@shopify/hydrogen";\n\nexport default function ProductCard({ product }) {\n  const { priceV2: price, compareAtPriceV2: compareAtPrice } =\n    product.variants?.nodes[0] || {};\n\n  const isDiscounted = compareAtPrice?.amount > price?.amount;\n\n  return (\n    <Link to={`/products/${product.handle}`}>\n      <div className="grid gap-6">\n        <div className="shadow-sm rounded relative">\n          {isDiscounted && (\n            <label className="subpixel-antialiased absolute top-0 right-0 m-4 text-right text-notice text-red-600 text-xs">\n              Sale\n            </label>\n          )}\n          <Image\n            className="aspect-[4/5]"\n            data={product.variants.nodes[0].image}\n            alt="Alt Tag"\n          />\n        </div>\n        <div className="grid gap-1">\n          <h3 className="max-w-prose text-copy w-full overflow-hidden whitespace-nowrap text-ellipsis ">\n            {product.title}\n          </h3>\n          <div className="flex gap-4">\n            <span className="max-w-prose whitespace-pre-wrap inherit text-copy flex gap-4">\n              <Money withoutTrailingZeros data={price} />\n              {isDiscounted && (\n                <Money\n                  className="line-through opacity-50"\n                  withoutTrailingZeros\n                  data={compareAtPrice}\n                />\n              )}\n            </span>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n')))),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Update the collection GraphQL query to include retrieving products and variants that belong to the collection:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/routes/collections/[handle].server.jsx\n\nimport {\n  gql,\n  useShopQuery,\n  useRouteParams,\n  useServerAnalytics,\n  ShopifyAnalyticsConstants,\n  Seo,\n} from "@shopify/hydrogen";\n\nimport { Layout } from "../../components/Layout.server";\nimport ProductCard from "../../components/ProductCard.server";\nimport { Suspense } from "react";\n\nexport default function Collection() {\n  const { handle } = useRouteParams();\n\n  const {\n    data: { collection },\n  } = useShopQuery({\n    query: QUERY,\n    variables: {\n      handle,\n    },\n  });\n\n  useServerAnalytics({\n    shopify: {\n      pageType: ShopifyAnalyticsConstants.pageType.collection,\n      resourceId: collection.id,\n    },\n  });\n\n  return (\n    <Layout>\n      <Suspense>\n        <Seo type="collection" data={collection} />\n      </Suspense>\n      <header className="grid w-full gap-8 p-4 py-8 md:p-8 lg:p-12 justify-items-start">\n        <h1 className="text-4xl whitespace-pre-wrap font-bold inline-block">\n          {collection.title}\n        </h1>\n\n        {collection.description && (\n          <div className="flex items-baseline justify-between w-full">\n            <div>\n              <p className="max-w-md whitespace-pre-wrap inherit text-copy inline-block">\n                {collection.description}\n              </p>\n            </div>\n          </div>\n        )}\n      </header>\n\n      <section className="w-full gap-4 md:gap-8 grid p-6 md:p-8 lg:p-12">\n        <div className="grid-flow-row grid gap-2 gap-y-6 md:gap-4 lg:gap-6 grid-cols-2 md:grid-cols-3 lg:grid-cols-4">\n          {collection.products.nodes.map((product) => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n        </div>\n      </section>\n    </Layout>\n  );\n}\n\nconst QUERY = gql`\n  query CollectionDetails($handle: String!) {\n    collection(handle: $handle) {\n      id\n      title\n      description\n      seo {\n        description\n        title\n      }\n      image {\n        id\n        url\n        width\n        height\n        altText\n      }\n      products(first: 8) {\n        nodes {\n          id\n          title\n          publishedAt\n          handle\n          variants(first: 1) {\n            nodes {\n              id\n              image {\n                url\n                altText\n                width\n                height\n              }\n              priceV2 {\n                amount\n                currencyCode\n              }\n              compareAtPriceV2 {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n')))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'The page renders the following products that belong to the collection:\n\n<video autoplay muted loop controls>\n  <source src="https://shopify.dev/assets/custom-storefronts/hydrogen/build-a-collection-page.mp4" />\n</video>\n')),(0,a.yg)("h2",{id:"next-steps"},"Next steps"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Learn how to ",(0,a.yg)("a",{parentName:"li",href:"/tutorials/getting-started/tutorial/products/"},"build a product page"),".")))}u.isMDXComponent=!0}}]);