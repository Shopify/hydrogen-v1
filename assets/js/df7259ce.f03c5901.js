"use strict";(self.webpackChunkdocs_v_1=self.webpackChunkdocs_v_1||[]).push([[6964],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},352:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=t(8168),r=(t(6540),t(5680));const o={},i="Build a cart",s={unversionedId:"tutorials/getting-started/tutorial/cart",id:"tutorials/getting-started/tutorial/cart",title:"Build a cart",description:"Hydrogen 2.0 is out now. These archival Hydrogen 1.0 docs are provided only to assist developers during their upgrade process. Please migrate as soon as possible.",source:"@site/docs/tutorials/getting-started/tutorial/cart.md",sourceDirName:"tutorials/getting-started/tutorial",slug:"/tutorials/getting-started/tutorial/cart",permalink:"/hydrogen-v1/tutorials/getting-started/tutorial/cart",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"hydrogen",previous:{title:"Begin developing a Hydrogen storefront",permalink:"/hydrogen-v1/tutorials/getting-started/tutorial/begin"},next:{title:"Build a collection page",permalink:"/hydrogen-v1/tutorials/getting-started/tutorial/collections"}},l={},d=[{value:"Scenario",id:"scenario",level:2},{value:"What you\u2019ll learn",id:"what-youll-learn",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Sample code",id:"sample-code",level:2},{value:"Step 1: Wrap your app in the <code>CartProvider</code>",id:"step-1-wrap-your-app-in-the-cartprovider",level:2},{value:"Step 2: Create a drawer",id:"step-2-create-a-drawer",level:2},{value:"Step 3: Add a cart icon to the header",id:"step-3-add-a-cart-icon-to-the-header",level:2},{value:"Step 4: Build the cart",id:"step-4-build-the-cart",level:2},{value:"CartEmpty",id:"cartempty",level:3},{value:"CartCheckoutActions",id:"cartcheckoutactions",level:3},{value:"OrderSummary",id:"ordersummary",level:3},{value:"CartLineItem",id:"cartlineitem",level:3},{value:"CartLineQuantityAdjust",id:"cartlinequantityadjust",level:3},{value:"Step 5: Add <code>CartDetails</code> to <code>Drawer</code>",id:"step-5-add-cartdetails-to-drawer",level:2},{value:"Step 6: Add an &quot;Add to cart&quot; button to the product page",id:"step-6-add-an-add-to-cart-button-to-the-product-page",level:2},{value:"Next steps",id:"next-steps",level:2}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"build-a-cart"},"Build a cart"),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Hydrogen 2.0 is out now. These archival Hydrogen 1.0 docs are provided only to assist developers during their upgrade process. Please ",(0,r.yg)("a",{parentName:"p",href:"/migrate"},"migrate")," as soon as possible.")),(0,r.yg)("p",null,"Previously, you ",(0,r.yg)("a",{parentName:"p",href:"/tutorials/getting-started/tutorial/products/"},"built a product page"),". Your Hydrogen storefront now renders detailed information about products and provides a purchasing option, ",(0,r.yg)("strong",{parentName:"p"},"Buy it now"),", to customers. You're now ready to build a cart in your app."),(0,r.yg)("p",null,"In this tutorial, you'll build a cart that contains the merchandise that a customer wants to buy, and the estimated cost that's associated with the cart."),(0,r.yg)("h2",{id:"scenario"},"Scenario"),(0,r.yg)("p",null,"You want to build functionality into your Hydrogen storefront so customers can add items to their cart that they want to purchase. When a customer is ready to purchase their items, they can proceed to checkout."),(0,r.yg)("h2",{id:"what-youll-learn"},"What you\u2019ll learn"),(0,r.yg)("p",null,"In this tutorial, you\u2019ll learn how to do the following tasks:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Define the context for interacting with a cart, including keeping track of the cart\u2019s open and closed states"),(0,r.yg)("li",{parentName:"ul"},"Build a cart section that renders on any page in your Hydrogen storefront"),(0,r.yg)("li",{parentName:"ul"},"Update the product details page to include an ",(0,r.yg)("strong",{parentName:"li"},"Add to cart")," option.")),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/hydrogen-cart.png",alt:"An implementation of a cart in a Hydrogen storefront"})),(0,r.yg)("h2",{id:"requirements"},"Requirements"),(0,r.yg)("p",null,"You\u2019ve completed ",(0,r.yg)("a",{parentName:"p",href:"/tutorials/getting-started/tutorial/products/"},"Build a product page"),"."),(0,r.yg)("h2",{id:"sample-code"},"Sample code"),(0,r.yg)("p",null,"If you want to quickly get started, then you can copy and paste the following code from each file into the corresponding files in your Hydrogen app. If the file doesn\u2019t yet exist, then you can create it in your Hydrogen app. This tutorial describes the sample code step by step:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Note:\nThe Drawer sample code includes a ",(0,r.yg)("inlineCode",{parentName:"p"},"Dialog")," component from ",(0,r.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@headlessui/react"},"@headlessui/react"),". You must install this package manually. ",(0,r.yg)("a",{parentName:"p",href:"#step-2-create-a-drawer"},"Learn more"),".")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/App.server.jsx\n\nimport renderHydrogen from "@shopify/hydrogen/entry-server";\nimport {\n  Router,\n  FileRoutes,\n  ShopifyProvider,\n  CartProvider,\n} from "@shopify/hydrogen";\nimport { Suspense } from "react";\n\nfunction App({ routes }) {\n  return (\n    <Suspense fallback={null}>\n      <ShopifyProvider>\n          <CartProvider>\n            <Router>\n              <FileRoutes routes={routes} />\n            </Router>\n          </CartProvider>\n      </ShopifyProvider>\n    </Suspense>\n  );\n}\n\nexport default renderHydrogen(App);\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/Layout.server.jsx\n\nimport { Suspense } from "react";\nimport { useShopQuery, CacheLong, gql, Seo } from "@shopify/hydrogen";\n\nimport Header from "./Header.client";\n\n/**\n * A server component that defines a structure and organization of a page that can be used in different parts of the Hydrogen app\n */\nexport function Layout({ children }) {\n  const {\n    data: { shop },\n  } = useShopQuery({\n    query: SHOP_QUERY,\n    cache: CacheLong(),\n  });\n\n  return (\n    <>\n      <Suspense>\n        <Seo\n          type="defaultSeo"\n          data={{\n            title: shop.name,\n            description: shop.description,\n          }}\n        />\n      </Suspense>\n      <div className="flex flex-col min-h-screen antialiased bg-neutral-50">\n        <div className="">\n          <a href="#mainContent" className="sr-only">\n            Skip to content\n          </a>\n        </div>\n        <Header shop={shop} />\n\n        <main role="main" id="mainContent" className="flex-grow">\n          <Suspense fallback={null}>{children}</Suspense>\n        </main>\n      </div>\n    </>\n  );\n}\n\nconst SHOP_QUERY = gql`\n  query layout {\n    shop {\n      name\n      description\n    }\n  }\n`;\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript?filename:",metastring:"'/src/components/Drawer.client.jsx', title: 'Drawer'","'/src/components/Drawer.client.jsx',":!0,"title:":!0,"'Drawer'":!0},'import { Dialog, Transition } from "@headlessui/react";\nimport { Fragment, useState } from "react";\n\n/**\n * A Drawer component that opens on user click.\n * @param open - Boolean state. If `true`, then the drawer opens.\n * @param onClose - Function should set the open state.\n * @param children - React children node.\n */\nfunction Drawer({ open, onClose, children }) {\n  return (\n    <Transition appear show={open} as={Fragment}>\n      <Dialog as="div" className="relative z-50" onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter="ease-out duration-300"\n          enterFrom="opacity-0 left-0"\n          enterTo="opacity-100"\n          leave="ease-in duration-200"\n          leaveFrom="opacity-100"\n          leaveTo="opacity-0"\n        >\n          <div className="fixed inset-0 bg-black bg-opacity-25" />\n        </Transition.Child>\n\n        <div className="fixed inset-0">\n          <div className="absolute inset-0 overflow-hidden">\n            <div className="fixed inset-y-0 right-0 flex max-w-full pl-10">\n              <Transition.Child\n                as={Fragment}\n                enter="transform transition ease-in-out duration-500 sm:duration-700"\n                enterFrom="translate-x-full"\n                enterTo="translate-x-0"\n                leave="transform transition ease-in-out duration-500 sm:duration-700"\n                leaveFrom="translate-x-0"\n                leaveTo="translate-x-full"\n              >\n                <Dialog.Panel className="max-w-lg transform text-left align-middle shadow-xl transition-all antialiased bg-neutral-50">\n                  <header className="sticky top-0 flex items-center justify-between px-4 h-24 sm:px-8 md:px-12">\n                    <h2\n                      id="cart-contents"\n                      className="whitespace-pre-wrap max-w-prose font-bold text-lg"\n                    >\n                      Cart\n                    </h2>\n                    <button\n                      type="button"\n                      className="p-4 -m-4 transition text-primary hover:text-primary/50"\n                      onClick={onClose}\n                    >\n                      <IconClose aria-label="Close panel" />\n                    </button>\n                  </header>\n                  {children}\n                </Dialog.Panel>\n              </Transition.Child>\n            </div>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n\n/* Use for associating `aria-labelledby` with the title */\nDrawer.Title = Dialog.Title;\n\nexport { Drawer };\n\nexport function useDrawer(openDefault = false) {\n  const [isOpen, setIsOpen] = useState(openDefault);\n\n  function openDrawer() {\n    setIsOpen(true);\n  }\n\n  function closeDrawer() {\n    setIsOpen(false);\n  }\n\n  return {\n    isOpen,\n    openDrawer,\n    closeDrawer,\n  };\n}\n\nfunction IconClose() {\n  return (\n    <svg\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 20 20"\n      className="w-5 h-5"\n    >\n      <title>Close</title>\n      <line\n        x1="4.44194"\n        y1="4.30806"\n        x2="15.7556"\n        y2="15.6218"\n        stroke="currentColor"\n        strokeWidth="1.25"\n      />\n      <line\n        y1="-0.625"\n        x2="16"\n        y2="-0.625"\n        transform="matrix(-0.707107 0.707107 0.707107 0.707107 16 4.75)"\n        stroke="currentColor"\n        strokeWidth="1.25"\n      />\n    </svg>\n  );\n}\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript?filename:",metastring:"'/src/components/Header.client.jsx', title: 'Header'","'/src/components/Header.client.jsx',":!0,"title:":!0,"'Header'":!0},'import { useUrl, Link, useCart } from "@shopify/hydrogen";\nimport { Drawer, useDrawer } from "./Drawer.client";\nimport { CartDetails } from "./CartDetails.client";\n\nexport default function Header({ shop }) {\n  const { pathname } = useUrl();\n  const { isOpen, openDrawer, closeDrawer } = useDrawer();\n\n  const isHome = pathname === "/";\n  return (\n    <>\n      <Drawer open={isOpen} onClose={closeDrawer}>\n        <div className="grid">\n          <Drawer.Title>\n            <h2 className="sr-only">Cart Drawer</h2>\n          </Drawer.Title>\n          <CartDetails onClose={closeDrawer} />\n        </div>\n      </Drawer>\n      <header\n        role="banner"\n        className={`flex items-center h-16 p-6 md:p-8 lg:p-12 sticky backdrop-blur-lg z-40 top-0 justify-between w-full leading-none gap-4 antialiased transition shadow-sm ${\n          isHome ? "bg-black/80 text-white" : "bg-white/80"\n        }`}\n      >\n        <div className="flex gap-12">\n          <Link className="font-bold" to="/">\n            {shop.name}\n          </Link>\n        </div>\n\n        <button\n          onClick={openDrawer}\n          className="relative flex items-center justify-center w-8 h-8"\n        >\n          <IconBag />\n          <CartBadge dark={isHome} />\n        </button>\n      </header>\n    </>\n  );\n}\n\nfunction IconBag() {\n  return (\n    <svg\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 20 20"\n      fill="currentColor"\n      className="w-5 h-5"\n    >\n      <title>Bag</title>\n      <path\n        fillRule="evenodd"\n        d="M8.125 5a1.875 1.875 0 0 1 3.75 0v.375h-3.75V5Zm-1.25.375V5a3.125 3.125 0 1 1 6.25 0v.375h3.5V15A2.625 2.625 0 0 1 14 17.625H6A2.625 2.625 0 0 1 3.375 15V5.375h3.5ZM4.625 15V6.625h10.75V15c0 .76-.616 1.375-1.375 1.375H6c-.76 0-1.375-.616-1.375-1.375Z"\n      />\n    </svg>\n  );\n}\n\nfunction CartBadge({ dark }) {\n  const { totalQuantity } = useCart();\n\n  if (totalQuantity < 1) {\n    return null;\n  }\n  return (\n    <div\n      className={`${\n        dark ? "text-black bg-white" : "text-white bg-black"\n      } absolute bottom-1 right-1 text-[0.625rem] font-medium subpixel-antialiased h-3 min-w-[0.75rem] flex items-center justify-center leading-none text-center rounded-full w-auto px-[0.125rem] pb-px`}\n    >\n      <span>{totalQuantity}</span>\n    </div>\n  );\n}\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript?filename:",metastring:"'/src/components/CartDetails.client.jsx', title: 'CartDetails'","'/src/components/CartDetails.client.jsx',":!0,"title:":!0,"'CartDetails'":!0},'import {\n  useCart,\n  useCartLine,\n  CartLineProvider,\n  CartShopPayButton,\n  CartLineQuantityAdjustButton,\n  CartLinePrice,\n  CartLineQuantity,\n  Image,\n  Link,\n  Money,\n} from "@shopify/hydrogen";\n\nexport function CartDetails({ onClose }) {\n  const { lines } = useCart();\n\n  if (lines.length === 0) {\n    return <CartEmpty onClose={onClose} />;\n  }\n\n  return (\n    <form className="grid grid-cols-1 grid-rows-[1fr_auto] h-[calc(100vh-6rem)]">\n      <section\n        aria-labelledby="cart-contents"\n        className="px-4 pb-4 overflow-auto transition md:px-12"\n      >\n        <ul className="grid gap-6 md:gap-10 overflow-y-scroll">\n          {lines.map((line) => {\n            return (\n              <CartLineProvider key={line.id} line={line}>\n                <CartLineItem />\n              </CartLineProvider>\n            );\n          })}\n        </ul>\n      </section>\n      <section\n        aria-labelledby="summary-heading"\n        className="p-4 border-t md:px-12"\n      >\n        <h2 id="summary-heading" className="sr-only">\n          Order summary\n        </h2>\n        <OrderSummary />\n        <CartCheckoutActions />\n      </section>\n    </form>\n  );\n}\n\nexport function CartEmpty({ onClose }) {\n  return (\n    <div className="flex flex-col space-y-7 justify-center items-center md:py-8 md:px-12 px-4 py-6 h-screen">\n      <h2 className="whitespace-pre-wrap max-w-prose font-bold text-4xl">\n        Your cart is empty\n      </h2>\n      <button\n        onClick={onClose}\n        className="inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none bg-black text-white w-full"\n      >\n        Continue shopping\n      </button>\n    </div>\n  );\n}\n\nfunction CartCheckoutActions() {\n  const { checkoutUrl } = useCart();\n  return (\n    <>\n      <div className="flex flex-col items-center mt-6 md:mt-8">\n        <Link\n          to={checkoutUrl}\n          width="full"\n          className="inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none bg-black text-white w-full"\n        >\n          Continue to Checkout\n        </Link>\n        <CartShopPayButton className="flex items-center justify-center rounded-sm mt-2 bg-[#5a31f4] w-full" />\n      </div>\n    </>\n  );\n}\n\nfunction OrderSummary() {\n  const { cost } = useCart();\n  return (\n    <>\n      <dl className="space-y-2">\n        <div className="flex items-center justify-between">\n          <dt>Subtotal</dt>\n          <dd>\n            {cost?.subtotalAmount?.amount ? (\n              <Money data={cost?.subtotalAmount} />\n            ) : (\n              "-"\n            )}\n          </dd>\n        </div>\n        <div className="flex items-center justify-between">\n          <dt className="flex items-center">\n            <span>Shipping estimate</span>\n          </dt>\n          <dd className="text-green-600">Free and carbon neutral</dd>\n        </div>\n      </dl>\n    </>\n  );\n}\n\nexport function CartLineItem() {\n  const { linesRemove } = useCart();\n  const { id: lineId, quantity, merchandise } = useCartLine();\n\n  return (\n    <li key={lineId} className="flex">\n      <div className="flex-shrink-0">\n        <Image\n          data={merchandise.image}\n          className="object-cover object-center w-24 h-24 border rounded md:w-28 md:h-28"\n        />\n      </div>\n\n      <div className="flex justify-between flex-1 ml-4 sm:ml-6">\n        <div className="relative grid gap-1">\n          <h3 className="font-medium">\n            <Link to={`/products/${merchandise.product.handle}`}>\n              {merchandise.product.title}\n            </Link>\n          </h3>\n\n          <div className="flex flex-col justify-start mt-2">\n            {(merchandise?.selectedOptions || []).map((option) => (\n              <span key={option.name} className="last:mb-4 text-gray-500">\n                {option.name}: {option.value}\n              </span>\n            ))}\n          </div>\n\n          <div className="flex items-center gap-2 mt-auto">\n            <div className="flex justify-start text-copy mr-4">\n              <CartLineQuantityAdjust\n                lineId={lineId}\n                quantity={quantity}\n                linesRemove={linesRemove}\n              />\n            </div>\n            <button\n              type="button"\n              onClick={() => linesRemove(lineId)}\n              className="h-[40px] w-[40px] border rounded flex justify-center items-center"\n            >\n              <span className="sr-only">Remove</span>\n              <svg\n                xmlns="http://www.w3.org/2000/svg"\n                viewBox="0 0 20 20"\n                className="w-[13px] h-[14px]"\n              >\n                <title>Remove</title>\n                <path\n                  transform="translate(4 4)"\n                  d="M1.0498 0.75C0.917196 0.75 0.790019 0.802679 0.696251 0.896447C0.602483 0.990215 0.549805 1.11739 0.549805 1.25V7.25C0.549805 7.38261 0.602483 7.50979 0.696251 7.60355C0.790019 7.69732 0.917196 7.75 1.0498 7.75C1.18241 7.75 1.30959 7.69732 1.40336 7.60355C1.49713 7.50979 1.5498 7.38261 1.5498 7.25V1.25C1.5498 1.11739 1.49713 0.990215 1.40336 0.896447C1.30959 0.802679 1.18241 0.75 1.0498 0.75ZM3.9498 0.75C3.8172 0.75 3.69002 0.802679 3.59625 0.896447C3.50248 0.990215 3.4498 1.11739 3.4498 1.25V7.25C3.4498 7.38261 3.50248 7.50979 3.59625 7.60355C3.69002 7.69732 3.8172 7.75 3.9498 7.75C4.08241 7.75 4.20959 7.69732 4.30336 7.60355C4.39713 7.50979 4.4498 7.38261 4.4498 7.25V1.25C4.4498 1.11739 4.39713 0.990215 4.30336 0.896447C4.20959 0.802679 4.08241 0.75 3.9498 0.75Z"\n                />\n                <path d="M12.5 2.5H8.97C8.93489 1.90332 8.72636 1.32986 8.37 0.85C7.94 0.32 7.3 0 6.5 0C5.7 0 5.06 0.32 4.63 0.85C4.27312 1.32958 4.06454 1.9032 4.03 2.5H0.5C0.367392 2.5 0.240215 2.55268 0.146447 2.64645C0.0526784 2.74021 0 2.86739 0 3C0 3.13261 0.0526784 3.25979 0.146447 3.35355C0.240215 3.44732 0.367392 3.5 0.5 3.5H1.75V13.5C1.75 13.78 1.97 14 2.25 14H10.75C10.8826 14 11.0098 13.9473 11.1036 13.8536C11.1973 13.7598 11.25 13.6326 11.25 13.5V3.5H12.5C12.6326 3.5 12.7598 3.44732 12.8536 3.35355C12.9473 3.25979 13 3.13261 13 3C13 2.86739 12.9473 2.74021 12.8536 2.64645C12.7598 2.55268 12.6326 2.5 12.5 2.5ZM5.41 1.48C5.64 1.19 5.99 1 6.5 1C7.01 1 7.35 1.19 7.59 1.48C7.79 1.72 7.89 2.08 7.95 2.5H5.05C5.1 2.08 5.22 1.72 5.41 1.48ZM10.25 13H2.75V3.5H10.25V13Z" />\n              </svg>\n            </button>\n          </div>\n        </div>\n        <span>\n          <CartLinePrice as="span" />\n        </span>\n      </div>\n    </li>\n  );\n}\n\nfunction CartLineQuantityAdjust({ lineId, quantity }) {\n  return (\n    <>\n      <label htmlFor={`quantity-${lineId}`} className="sr-only">\n        Quantity, {quantity}\n      </label>\n      <div className="flex items-center overflow-auto border rounded">\n        <CartLineQuantityAdjustButton\n          adjust="decrease"\n          aria-label="Decrease quantity"\n          className="h-[40px] flex justify-center items-center px-3 py-[0.125rem] transition text-primary/40 hover:text-primary disabled:pointer-events-all disabled:cursor-wait"\n        >\n          &#8722;\n        </CartLineQuantityAdjustButton>\n        <CartLineQuantity\n          as="div"\n          className="h-[40px] flex justify-center items-center text-center py-[0.125rem] px-2 text-primary/90"\n        />\n        <CartLineQuantityAdjustButton\n          adjust="increase"\n          aria-label="Increase quantity"\n          className="h-[40px] flex justify-center items-center px-3 py-[0.125rem] transition text-primary/40 hover:text-primary disabled:pointer-events-all disabled:cursor-wait"\n        >\n          &#43;\n        </CartLineQuantityAdjustButton>\n      </div>\n    </>\n  );\n}\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript?filename:",metastring:"'/src/components/ProductDetails.client.jsx', title: 'ProductDetails'","'/src/components/ProductDetails.client.jsx',":!0,"title:":!0,"'ProductDetails'":!0},'import {\n  ProductOptionsProvider,\n  MediaFile,\n  useProductOptions,\n  ProductPrice,\n  BuyNowButton,\n  AddToCartButton,\n} from "@shopify/hydrogen";\n\nexport default function ProductDetails({ product }) {\n  return (\n    <ProductOptionsProvider data={product}>\n      <section className="w-full overflow-x-hidden gap-4 md:gap-8 grid px-6 md:px-8 lg:px-12">\n        <div className="grid items-start gap-6 lg:gap-20 md:grid-cols-2 lg:grid-cols-3">\n          <div className="grid md:grid-flow-row  md:p-0 md:overflow-x-auto md:grid-cols-2 md:w-full lg:col-span-2">\n            <div className="md:col-span-2 snap-center card-image aspect-square md:w-full w-[80vw] shadow rounded">\n              <ProductGallery media={product.media.nodes} />\n            </div>\n          </div>\n          <div className="sticky md:mx-auto max-w-xl md:max-w-[24rem] grid gap-8 p-0 md:p-6 md:px-0 top-[6rem] lg:top-[8rem] xl:top-[10rem]">\n            <div className="grid gap-2">\n              <h1 className="text-4xl font-bold leading-10 whitespace-normal">\n                {product.title}\n              </h1>\n              <span className="max-w-prose whitespace-pre-wrap inherit text-copy opacity-50 font-medium">\n                {product.vendor}\n              </span>\n            </div>\n            <ProductForm product={product} />\n            <div className="mt-8">\n              <div\n                className="prose border-t border-gray-200 pt-6 text-black text-md"\n                dangerouslySetInnerHTML={{ __html: product.descriptionHtml }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </ProductOptionsProvider>\n  );\n}\n\nfunction ProductForm({ product }) {\n  const { options, selectedVariant } = useProductOptions();\n\n  return (\n    <form className="grid gap-10">\n      {\n        <div className="grid gap-4">\n          {options.map(({ name, values }) => {\n            if (values.length === 1) {\n              return null;\n            }\n            return (\n              <div\n                key={name}\n                className="flex flex-wrap items-baseline justify-start gap-6"\n              >\n                <legend className="whitespace-pre-wrap max-w-prose font-bold text-lead min-w-[4rem]">\n                  {name}\n                </legend>\n                <div className="flex flex-wrap items-baseline gap-4">\n                  <OptionRadio name={name} values={values} />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      }\n      <div>\n        <ProductPrice\n          className="text-gray-500 line-through text-lg font-semibold"\n          priceType="compareAt"\n          variantId={selectedVariant.id}\n          data={product}\n        />\n        <ProductPrice\n          className="text-gray-900 text-lg font-semibold"\n          variantId={selectedVariant.id}\n          data={product}\n        />\n      </div>\n      <div className="grid items-stretch gap-4">\n        <PurchaseMarkup />\n      </div>\n    </form>\n  );\n}\n\nfunction PurchaseMarkup() {\n  const { selectedVariant } = useProductOptions();\n  const isOutOfStock = !selectedVariant?.availableForSale || false;\n\n  return (\n    <>\n      <AddToCartButton\n        type="button"\n        variantId={selectedVariant.id}\n        quantity={1}\n        accessibleAddingToCartLabel="Adding item to your cart"\n        disabled={isOutOfStock}\n      >\n        <span className="bg-black text-white inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none w-full">\n          {isOutOfStock ? "Sold out" : "Add to cart"}\n        </span>\n      </AddToCartButton>\n      {isOutOfStock ? (\n        <span className="text-black text-center py-3 px-6 border rounded-sm leading-none ">\n          Available in 2-3 weeks\n        </span>\n      ) : (\n        <BuyNowButton variantId={selectedVariant.id}>\n          <span className="inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none border w-full">\n            Buy it now\n          </span>\n        </BuyNowButton>\n      )}\n    </>\n  );\n}\n\nfunction OptionRadio({ values, name }) {\n  const { selectedOptions, setSelectedOption } = useProductOptions();\n\n  return (\n    <>\n      {values.map((value) => {\n        const checked = selectedOptions[name] === value;\n        const id = `option-${name}-${value}`;\n\n        return (\n          <label key={id} htmlFor={id}>\n            <input\n              className="sr-only"\n              type="radio"\n              id={id}\n              name={`option[${name}]`}\n              value={value}\n              checked={checked}\n              onChange={() => setSelectedOption(name, value)}\n            />\n            <div\n              className={`leading-none border-b-[2px] py-1 cursor-pointer transition-all duration-200 ${\n                checked ? "border-gray-500" : "border-neutral-50"\n              }`}\n            >\n              {value}\n            </div>\n          </label>\n        );\n      })}\n    </>\n  );\n}\n\nfunction ProductGallery({ media }) {\n  if (!media.length) {\n    return null;\n  }\n\n  return (\n    <div\n      className={`grid gap-4 overflow-x-scroll grid-flow-col md:grid-flow-row  md:p-0 md:overflow-x-auto md:grid-cols-2 w-screen md:w-full lg:col-span-2`}\n    >\n      {media.map((med, i) => {\n        let extraProps = {};\n\n        if (med.mediaContentType === "MODEL_3D") {\n          extraProps = {\n            interactionPromptThreshold: "0",\n            ar: true,\n            loading: "eager",\n            disableZoom: true,\n          };\n        }\n\n        const data = {\n          ...med,\n          image: {\n            ...med.image,\n            altText: med.alt || "Product image",\n          },\n        };\n\n        return (\n          <div\n            className={`${\n              i % 3 === 0 ? "md:col-span-2" : "md:col-span-1"\n            } snap-center card-image bg-white aspect-square md:w-full w-[80vw] shadow-sm rounded`}\n            key={med.id || med.image.id}\n          >\n            <MediaFile\n              tabIndex="0"\n              className={`w-full h-full aspect-square object-cover`}\n              data={data}\n              options={{\n                crop: "center",\n              }}\n              {...extraProps}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n')),(0,r.yg)("h2",{id:"step-1-wrap-your-app-in-the-cartprovider"},"Step 1: Wrap your app in the ",(0,r.yg)("inlineCode",{parentName:"h2"},"CartProvider")),(0,r.yg)("p",null,"You can make a cart context available to your entire Hydrogen app by wrapping your app in the ",(0,r.yg)("inlineCode",{parentName:"p"},"CartProvider")," component."),(0,r.yg)("p",null,"The ",(0,r.yg)("a",{parentName:"p",href:"/components/cart/cartprovider/"},(0,r.yg)("inlineCode",{parentName:"a"},"CartProvider"))," component creates a cart object and callbacks that can be accessed by any descendent component using the ",(0,r.yg)("a",{parentName:"p",href:"/hooks/cart/usecart/"},(0,r.yg)("inlineCode",{parentName:"a"},"useCart"))," hook and related hooks. ",(0,r.yg)("inlineCode",{parentName:"p"},"CartProvider")," also carries out any callback props when a relevant action is performed."),(0,r.yg)("p",null,"In ",(0,r.yg)("inlineCode",{parentName:"p"},"/src/App.server.jsx"),", import the ",(0,r.yg)("inlineCode",{parentName:"p"},"CartProvider")," component and make it a descendent of the ",(0,r.yg)("a",{parentName:"p",href:"/components/global/shopifyprovider/"},(0,r.yg)("inlineCode",{parentName:"a"},"ShopifyProvider"))," component:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/App.server.jsx\n\nimport renderHydrogen from "@shopify/hydrogen/entry-server";\nimport {\n  Router,\n  FileRoutes,\n  ShopifyProvider,\n  CartProvider,\n} from "@shopify/hydrogen";\nimport { Suspense } from "react";\n\nfunction App({ routes }) {\n  return (\n    <Suspense fallback={null}>\n      <ShopifyProvider>\n          <CartProvider>\n            <Router>\n              <FileRoutes routes={routes} />\n            </Router>\n          </CartProvider>\n      </ShopifyProvider>\n    </Suspense>\n  );\n}\n\nexport default renderHydrogen(App);\n')),(0,r.yg)("h2",{id:"step-2-create-a-drawer"},"Step 2: Create a drawer"),(0,r.yg)("p",null,"You want to display a cart section when a customer clicks the cart icon or adds an item to the cart. To display the cart as an overlay on a page, you can use a ",(0,r.yg)("a",{parentName:"p",href:"https://headlessui.dev/react/dialog"},(0,r.yg)("inlineCode",{parentName:"a"},"Dialog")," component")," from ",(0,r.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@headlessui/react"},"@headlessui/react"),"."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Stop your development server.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Install the ",(0,r.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@headlessui/react"},"@headlessui/react")," package. This package includes unstyled and fully-accessible UI components for React, and integrates well with Tailwind:"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash?title:",metastring:"'npm'","'npm'":!0},"\nnpm install -s @headlessui/react\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash?title:",metastring:"'Yarn'","'Yarn'":!0},"yarn add @headlessui/react\n")),(0,r.yg)("ol",{start:3},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Restart your developer server.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"In your project, create a ",(0,r.yg)("inlineCode",{parentName:"p"},"Drawer")," client component in ",(0,r.yg)("inlineCode",{parentName:"p"},"/src/components/Drawer.client.jsx")," with the following contents:"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/Drawer.client.jsx\n\nimport { Dialog, Transition } from "@headlessui/react";\nimport { Fragment, useState } from "react";\n\n/**\n * A Drawer component that opens on user click.\n * @param open - Boolean state. If `true`, then the drawer opens.\n * @param onClose - Function should set the open state.\n * @param children - React children node.\n */\nfunction Drawer({ open, onClose, children }) {\n  return (\n    <Transition appear show={open} as={Fragment}>\n      <Dialog as="div" className="relative z-50" onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter="ease-out duration-300"\n          enterFrom="opacity-0 left-0"\n          enterTo="opacity-100"\n          leave="ease-in duration-200"\n          leaveFrom="opacity-100"\n          leaveTo="opacity-0"\n        >\n          <div className="fixed inset-0 bg-black bg-opacity-25" />\n        </Transition.Child>\n\n        <div className="fixed inset-0">\n          <div className="absolute inset-0 overflow-hidden">\n            <div className="fixed inset-y-0 right-0 flex max-w-full pl-10">\n              <Transition.Child\n                as={Fragment}\n                enter="transform transition ease-in-out duration-500 sm:duration-700"\n                enterFrom="translate-x-full"\n                enterTo="translate-x-0"\n                leave="transform transition ease-in-out duration-500 sm:duration-700"\n                leaveFrom="translate-x-0"\n                leaveTo="translate-x-full"\n              >\n                <Dialog.Panel className="max-w-lg transform text-left align-middle shadow-xl transition-all antialiased bg-neutral-50">\n                  <header className="sticky top-0 flex items-center justify-between px-4 h-24 sm:px-8 md:px-12">\n                    <h2\n                      id="cart-contents"\n                      className="whitespace-pre-wrap max-w-prose font-bold text-lg"\n                    >\n                      Cart\n                    </h2>\n                    <button\n                      type="button"\n                      className="p-4 -m-4 transition text-primary hover:text-primary/50"\n                      onClick={onClose}\n                    >\n                      <IconClose aria-label="Close panel" />\n                    </button>\n                  </header>\n                  {children}\n                </Dialog.Panel>\n              </Transition.Child>\n            </div>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n\n/* Use for associating arialabelledby with the title*/\nDrawer.Title = Dialog.Title;\n\nexport { Drawer };\n\nexport function useDrawer(openDefault = false) {\n  const [isOpen, setIsOpen] = useState(openDefault);\n\n  function openDrawer() {\n    setIsOpen(true);\n  }\n\n  function closeDrawer() {\n    setIsOpen(false);\n  }\n\n  return {\n    isOpen,\n    openDrawer,\n    closeDrawer,\n  };\n}\n\nfunction IconClose() {\n  return (\n    <svg\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 20 20"\n      className="w-5 h-5"\n    >\n      <title>Close</title>\n      <line\n        x1="4.44194"\n        y1="4.30806"\n        x2="15.7556"\n        y2="15.6218"\n        stroke="currentColor"\n        strokeWidth="1.25"\n      />\n      <line\n        y1="-0.625"\n        x2="16"\n        y2="-0.625"\n        transform="matrix(-0.707107 0.707107 0.707107 0.707107 16 4.75)"\n        stroke="currentColor"\n        strokeWidth="1.25"\n      />\n    </svg>\n  );\n}\n')),(0,r.yg)("h2",{id:"step-3-add-a-cart-icon-to-the-header"},"Step 3: Add a cart icon to the header"),(0,r.yg)("p",null,"In this step, you'll add a cart icon to the header to trigger a cart drawer. To implement this behavior, you'll need a client-side state."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"In your project, create a ",(0,r.yg)("inlineCode",{parentName:"li"},"Header")," client component and add the ",(0,r.yg)("inlineCode",{parentName:"li"},"Drawer")," component to it. Then, add a cart button to toggle the drawer along with a bag icon (",(0,r.yg)("inlineCode",{parentName:"li"},"IconBag"),") and cart badge counter (",(0,r.yg)("inlineCode",{parentName:"li"},"CartBadge"),").")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/Header.client.jsx\n\nimport { useUrl, Link, useCart } from "@shopify/hydrogen";\nimport { Drawer, useDrawer } from "./Drawer.client";\n\nexport default function Header({ shop }) {\n  const { pathname } = useUrl();\n  const { isOpen, openDrawer, closeDrawer } = useDrawer();\n\n  const isHome = pathname === "/";\n  return (\n    <>\n      <Drawer open={isOpen} onClose={closeDrawer}></Drawer>\n      <header\n        role="banner"\n        className={`flex items-center h-16 p-6 md:p-8 lg:p-12 sticky backdrop-blur-lg z-40 top-0 justify-between w-full leading-none gap-4 antialiased transition shadow-sm ${\n          isHome ? "bg-black/80 text-white" : "bg-white/80"\n        }`}\n      >\n        <div className="flex gap-12">\n          <Link className="font-bold" to="/">\n            {shop.name}\n          </Link>\n        </div>\n\n        <button\n          onClick={openDrawer}\n          className="relative flex items-center justify-center w-8 h-8"\n        >\n          <IconBag />\n          <CartBadge dark={isHome} />\n        </button>\n      </header>\n    </>\n  );\n}\n\nfunction IconBag() {\n  return (\n    <svg\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 20 20"\n      fill="currentColor"\n      className="w-5 h-5"\n    >\n      <title>Bag</title>\n      <path\n        fillRule="evenodd"\n        d="M8.125 5a1.875 1.875 0 0 1 3.75 0v.375h-3.75V5Zm-1.25.375V5a3.125 3.125 0 1 1 6.25 0v.375h3.5V15A2.625 2.625 0 0 1 14 17.625H6A2.625 2.625 0 0 1 3.375 15V5.375h3.5ZM4.625 15V6.625h10.75V15c0 .76-.616 1.375-1.375 1.375H6c-.76 0-1.375-.616-1.375-1.375Z"\n      />\n    </svg>\n  );\n}\n\nfunction CartBadge({ dark }) {\n  const { totalQuantity } = useCart();\n\n  if (totalQuantity < 1) {\n    return null;\n  }\n  return (\n    <div\n      className={`${\n        dark ? "text-black bg-white" : "text-white bg-black"\n      } absolute bottom-1 right-1 text-[0.625rem] font-medium subpixel-antialiased h-3 min-w-[0.75rem] flex items-center justify-center leading-none text-center rounded-full w-auto px-[0.125rem] pb-px`}\n    >\n      <span>{totalQuantity}</span>\n    </div>\n  );\n}\n')),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},"Import the ",(0,r.yg)("inlineCode",{parentName:"li"},"Header")," component into your ",(0,r.yg)("inlineCode",{parentName:"li"},"Layout")," component:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/Layout.server.jsx\n\nimport { Suspense } from "react";\nimport { useShopQuery, CacheLong, gql, Seo } from "@shopify/hydrogen";\n\nimport Header from "./Header.client";\n\n/**\n * A server component that defines a structure and organization of a page that can be used in different parts of the Hydrogen app\n */\nexport function Layout({ children }) {\n  const {\n    data: { shop },\n  } = useShopQuery({\n    query: SHOP_QUERY,\n    cache: CacheLong(),\n  });\n\n  return (\n    <>\n      <Suspense>\n        <Seo\n          type="defaultSeo"\n          data={{\n            title: shop.name,\n            description: shop.description,\n          }}\n        />\n      </Suspense>\n      <div className="flex flex-col min-h-screen antialiased bg-neutral-50">\n        <div className="">\n          <a href="#mainContent" className="sr-only">\n            Skip to content\n          </a>\n        </div>\n        <Header shop={shop} />\n\n        <main role="main" id="mainContent" className="flex-grow">\n          <Suspense fallback={null}>{children}</Suspense>\n        </main>\n      </div>\n    </>\n  );\n}\n\nconst SHOP_QUERY = gql`\n  query layout {\n    shop {\n      name\n      description\n    }\n  }\n`;\n')),(0,r.yg)("p",null,"The cart now renders on any page in your app:"),(0,r.yg)("video",{autoplay:!0,muted:!0,loop:!0,controls:!0},(0,r.yg)("source",{src:"https://shopify.dev/assets/custom-storefronts/hydrogen/cart-open-close.mp4"})),(0,r.yg)("h2",{id:"step-4-build-the-cart"},"Step 4: Build the cart"),(0,r.yg)("p",null,"In this step, you'll build different UI components within your cart. You'll centrally locate all of the UI components within a new ",(0,r.yg)("inlineCode",{parentName:"p"},"CartDetails")," component."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Create a ",(0,r.yg)("inlineCode",{parentName:"li"},"CartDetails")," client component in ",(0,r.yg)("inlineCode",{parentName:"li"},"/src/components/CartDetails.client.jsx")," with the following contents:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'```jsx\n// /src/components/CartDetails.client.jsx\n\nimport {\n  useCart,\n  useCartLine,\n  CartLineProvider,\n  CartShopPayButton,\n  CartLineQuantityAdjustButton,\n  CartLinePrice,\n  CartLineQuantity,\n  Image,\n  Link,\n  Money,\n} from "@shopify/hydrogen";\n\nexport function CartDetails({ onClose }) {\n  const { lines } = useCart();\n\n  if (lines.length === 0) {\n    return <CartEmpty onClose={onClose} />;\n  }\n\n  return (\n    <form className="grid grid-cols-1 grid-rows-[1fr_auto] h-[calc(100vh-6rem)]">\n      <section\n        aria-labelledby="cart-contents"\n        className="px-4 pb-4 overflow-auto transition md:px-12"\n      >\n        <ul className="grid gap-6 md:gap-10 overflow-y-scroll">\n          {lines.map((line) => {\n            return (\n              <CartLineProvider key={line.id} line={line}>\n                <CartLineItem />\n              </CartLineProvider>\n            );\n          })}\n        </ul>\n      </section>\n      <section\n        aria-labelledby="summary-heading"\n        className="p-4 border-t md:px-12"\n      >\n        <h2 id="summary-heading" className="sr-only">\n          Order summary\n        </h2>\n        <OrderSummary />\n        <CartCheckoutActions />\n      </section>\n    </form>\n  );\n}\n```\n')),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},"In ",(0,r.yg)("inlineCode",{parentName:"li"},"/src/components/CartDetails.client.jsx"),", add each of the following functions:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#cartempty"},"CartEmpty")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#cartcheckoutactions"},"CartCheckoutActions")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#ordersummary"},"OrderSummary")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#cartlineitem"},"CartLineItem")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#cartlinequantityadjust"},"CartLineQuantityAdjust"))),(0,r.yg)("h3",{id:"cartempty"},"CartEmpty"),(0,r.yg)("p",null,"Add the ",(0,r.yg)("inlineCode",{parentName:"p"},"CartEmpty")," function to ",(0,r.yg)("inlineCode",{parentName:"p"},"/src/components/CartDetails.client.jsx")," to render the UI when a cart doesn't contain any products:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/CartDetails.client.jsx\n\nexport function CartEmpty({ onClose }) {\n  return (\n    <div className="flex flex-col space-y-7 justify-center items-center md:py-8 md:px-12 px-4 py-6 h-screen">\n      <h2 className="whitespace-pre-wrap max-w-prose font-bold text-4xl">\n        Your cart is empty\n      </h2>\n      <button\n        onClick={onClose}\n        className="inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none bg-black text-white w-full"\n      >\n        Continue shopping\n      </button>\n    </div>\n  );\n}\n')),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/hydrogen-cart-empty.png",alt:"The UI when a cart doesn't contain any products"})),(0,r.yg)("h3",{id:"cartcheckoutactions"},"CartCheckoutActions"),(0,r.yg)("p",null,"Add the ",(0,r.yg)("inlineCode",{parentName:"p"},"CartCheckoutActions")," function to ",(0,r.yg)("inlineCode",{parentName:"p"},"/src/components/CartDetails.client.jsx")," to render checkout and Shop Pay buttons:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/CartDetails.client.jsx\n\nfunction CartCheckoutActions() {\n  const { checkoutUrl } = useCart();\n  return (\n    <>\n      <div className="flex flex-col items-center mt-6 md:mt-8">\n        <Link\n          to={checkoutUrl}\n          width="full"\n          className="inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none bg-black text-white w-full"\n        >\n          Continue to Checkout\n        </Link>\n        <CartShopPayButton className="flex items-center justify-center rounded-sm mt-2 bg-[#5a31f4] w-full" />\n      </div>\n    </>\n  );\n}\n')),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/hydrogen-checkout-shop-pay.png",alt:"Checkout and Shop Pay buttons"})),(0,r.yg)("h3",{id:"ordersummary"},"OrderSummary"),(0,r.yg)("p",null,"Add the ",(0,r.yg)("inlineCode",{parentName:"p"},"OrderSummary")," function to ",(0,r.yg)("inlineCode",{parentName:"p"},"/src/components/CartDetails.client.jsx")," to render order summary information, which includes a subtotal and a shipping estimate:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/CartDetails.client.jsx\n\nfunction OrderSummary() {\n  const { cost } = useCart();\n  return (\n    <>\n      <dl className="space-y-2">\n        <div className="flex items-center justify-between">\n          <dt>Subtotal</dt>\n          <dd>\n            {cost?.subtotalAmount?.amount ? (\n              <Money data={cost?.subtotalAmount} />\n            ) : (\n              "-"\n            )}\n          </dd>\n        </div>\n        <div className="flex items-center justify-between">\n          <dt className="flex items-center">\n            <span>Shipping estimate</span>\n          </dt>\n          <dd className="text-green-600">Free and carbon neutral</dd>\n        </div>\n      </dl>\n    </>\n  );\n}\n')),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/hydrogen-order-summary.png",alt:"Order summary information"})),(0,r.yg)("h3",{id:"cartlineitem"},"CartLineItem"),(0,r.yg)("p",null,"Add the ",(0,r.yg)("inlineCode",{parentName:"p"},"CartLineItem")," function to ",(0,r.yg)("inlineCode",{parentName:"p"},"/src/components/CartDetails.client.jsx")," to render cart line items that include an image, product details, and a price:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/CartDetails.client.jsx\n\nexport function CartLineItem() {\n  const { linesRemove } = useCart();\n  const { id: lineId, quantity, merchandise } = useCartLine();\n\n  return (\n    <li key={lineId} className="flex">\n      <div className="flex-shrink-0">\n        <Image\n          data={merchandise.image}\n          className="object-cover object-center w-24 h-24 border rounded md:w-28 md:h-28"\n        />\n      </div>\n\n      <div className="flex justify-between flex-1 ml-4 sm:ml-6">\n        <div className="relative grid gap-1">\n          <h3 className="font-medium">\n            <Link to={`/products/${merchandise.product.handle}`}>\n              {merchandise.product.title}\n            </Link>\n          </h3>\n\n          <div className="flex flex-col justify-start mt-2">\n            {(merchandise?.selectedOptions || []).map((option) => (\n              <span key={option.name} className="last:mb-4 text-gray-500">\n                {option.name}: {option.value}\n              </span>\n            ))}\n          </div>\n\n          <div className="flex items-center gap-2 mt-auto">\n            <div className="flex justify-start text-copy mr-4">\n              <CartLineQuantityAdjust\n                lineId={lineId}\n                quantity={quantity}\n                linesRemove={linesRemove}\n              />\n            </div>\n            <button\n              type="button"\n              onClick={() => linesRemove(lineId)}\n              className="h-[40px] w-[40px] border rounded flex justify-center items-center"\n            >\n              <span className="sr-only">Remove</span>\n              <svg\n                xmlns="http://www.w3.org/2000/svg"\n                viewBox="0 0 20 20"\n                className="w-[13px] h-[14px]"\n              >\n                <title>Remove</title>\n                <path\n                  transform="translate(4 4)"\n                  d="M1.0498 0.75C0.917196 0.75 0.790019 0.802679 0.696251 0.896447C0.602483 0.990215 0.549805 1.11739 0.549805 1.25V7.25C0.549805 7.38261 0.602483 7.50979 0.696251 7.60355C0.790019 7.69732 0.917196 7.75 1.0498 7.75C1.18241 7.75 1.30959 7.69732 1.40336 7.60355C1.49713 7.50979 1.5498 7.38261 1.5498 7.25V1.25C1.5498 1.11739 1.49713 0.990215 1.40336 0.896447C1.30959 0.802679 1.18241 0.75 1.0498 0.75ZM3.9498 0.75C3.8172 0.75 3.69002 0.802679 3.59625 0.896447C3.50248 0.990215 3.4498 1.11739 3.4498 1.25V7.25C3.4498 7.38261 3.50248 7.50979 3.59625 7.60355C3.69002 7.69732 3.8172 7.75 3.9498 7.75C4.08241 7.75 4.20959 7.69732 4.30336 7.60355C4.39713 7.50979 4.4498 7.38261 4.4498 7.25V1.25C4.4498 1.11739 4.39713 0.990215 4.30336 0.896447C4.20959 0.802679 4.08241 0.75 3.9498 0.75Z"\n                />\n                <path d="M12.5 2.5H8.97C8.93489 1.90332 8.72636 1.32986 8.37 0.85C7.94 0.32 7.3 0 6.5 0C5.7 0 5.06 0.32 4.63 0.85C4.27312 1.32958 4.06454 1.9032 4.03 2.5H0.5C0.367392 2.5 0.240215 2.55268 0.146447 2.64645C0.0526784 2.74021 0 2.86739 0 3C0 3.13261 0.0526784 3.25979 0.146447 3.35355C0.240215 3.44732 0.367392 3.5 0.5 3.5H1.75V13.5C1.75 13.78 1.97 14 2.25 14H10.75C10.8826 14 11.0098 13.9473 11.1036 13.8536C11.1973 13.7598 11.25 13.6326 11.25 13.5V3.5H12.5C12.6326 3.5 12.7598 3.44732 12.8536 3.35355C12.9473 3.25979 13 3.13261 13 3C13 2.86739 12.9473 2.74021 12.8536 2.64645C12.7598 2.55268 12.6326 2.5 12.5 2.5ZM5.41 1.48C5.64 1.19 5.99 1 6.5 1C7.01 1 7.35 1.19 7.59 1.48C7.79 1.72 7.89 2.08 7.95 2.5H5.05C5.1 2.08 5.22 1.72 5.41 1.48ZM10.25 13H2.75V3.5H10.25V13Z" />\n              </svg>\n            </button>\n          </div>\n        </div>\n        <span>\n          <CartLinePrice as="span" />\n        </span>\n      </div>\n    </li>\n  );\n}\n')),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/hydrogen-cart-line-items.png",alt:"Cart line items that include an image, product details, and a price"})),(0,r.yg)("h3",{id:"cartlinequantityadjust"},"CartLineQuantityAdjust"),(0,r.yg)("p",null,"Add the ",(0,r.yg)("inlineCode",{parentName:"p"},"CartLineQuantityAdjust")," function to ",(0,r.yg)("inlineCode",{parentName:"p"},"/src/components/CartDetails.client.jsx")," to render the quantity of each cart line item and a plus ",(0,r.yg)("inlineCode",{parentName:"p"},"+")," and minus ",(0,r.yg)("inlineCode",{parentName:"p"},"-")," adjustor function:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/CartDetails.client.jsx\n\nfunction CartLineQuantityAdjust({ lineId, quantity }) {\n  return (\n    <>\n      <label htmlFor={`quantity-${lineId}`} className="sr-only">\n        Quantity, {quantity}\n      </label>\n      <div className="flex items-center overflow-auto border rounded">\n        <CartLineQuantityAdjustButton\n          adjust="decrease"\n          aria-label="Decrease quantity"\n          className="h-[40px] flex justify-center items-center px-3 py-[0.125rem] transition text-primary/40 hover:text-primary disabled:pointer-events-all disabled:cursor-wait"\n        >\n          &#8722;\n        </CartLineQuantityAdjustButton>\n        <CartLineQuantity\n          as="div"\n          className="h-[40px] flex justify-center items-center text-center py-[0.125rem] px-2 text-primary/90"\n        />\n        <CartLineQuantityAdjustButton\n          adjust="increase"\n          aria-label="Increase quantity"\n          className="h-[40px] flex justify-center items-center px-3 py-[0.125rem] transition text-primary/40 hover:text-primary disabled:pointer-events-all disabled:cursor-wait"\n        >\n          &#43;\n        </CartLineQuantityAdjustButton>\n      </div>\n    </>\n  );\n}\n')),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/hydrogen-cart-line-item-quantities.png",alt:"The quantity of each cart line item"})),(0,r.yg)("h2",{id:"step-5-add-cartdetails-to-drawer"},"Step 5: Add ",(0,r.yg)("inlineCode",{parentName:"h2"},"CartDetails")," to ",(0,r.yg)("inlineCode",{parentName:"h2"},"Drawer")),(0,r.yg)("p",null,"After you\u2019ve finished building the different sections of your ",(0,r.yg)("inlineCode",{parentName:"p"},"CartDetails")," component, you\u2019re ready to render the cart in your app."),(0,r.yg)("p",null,"In your ",(0,r.yg)("inlineCode",{parentName:"p"},"Header")," component, add the ",(0,r.yg)("inlineCode",{parentName:"p"},"CartDetails")," component to the ",(0,r.yg)("inlineCode",{parentName:"p"},"Drawer")," component:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/Header.client.jsx\n\nimport { useUrl, Link, useCart } from "@shopify/hydrogen";\nimport { Drawer, useDrawer } from "./Drawer.client";\nimport { CartDetails } from "./CartDetails.client";\n\nexport default function Header({ shop }) {\n  const { pathname } = useUrl();\n  const { isOpen, openDrawer, closeDrawer } = useDrawer();\n\n  const isHome = pathname === "/";\n  return (\n    <>\n      <Drawer open={isOpen} onClose={closeDrawer}>\n        <div className="grid">\n          <Drawer.Title>\n            <h2 className="sr-only">Cart Drawer</h2>\n          </Drawer.Title>\n          <CartDetails onClose={closeDrawer} />\n        </div>\n      </Drawer>\n      <header\n        role="banner"\n        className={`flex items-center h-16 p-6 md:p-8 lg:p-12 sticky backdrop-blur-lg z-40 top-0 justify-between w-full leading-none gap-4 antialiased transition shadow-sm ${\n          isHome ? "bg-black/80 text-white" : "bg-white/80"\n        }`}\n      >\n        <div className="flex gap-12">\n          <Link className="font-bold" to="/">\n            {shop.name}\n          </Link>\n        </div>\n\n        <button\n          onClick={openDrawer}\n          className="relative flex items-center justify-center w-8 h-8"\n        >\n          <IconBag />\n          <CartBadge dark={isHome} />\n        </button>\n      </header>\n    </>\n  );\n}\n\nfunction IconBag() {\n  return (\n    <svg\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 20 20"\n      fill="currentColor"\n      className="w-5 h-5"\n    >\n      <title>Bag</title>\n      <path\n        fillRule="evenodd"\n        d="M8.125 5a1.875 1.875 0 0 1 3.75 0v.375h-3.75V5Zm-1.25.375V5a3.125 3.125 0 1 1 6.25 0v.375h3.5V15A2.625 2.625 0 0 1 14 17.625H6A2.625 2.625 0 0 1 3.375 15V5.375h3.5ZM4.625 15V6.625h10.75V15c0 .76-.616 1.375-1.375 1.375H6c-.76 0-1.375-.616-1.375-1.375Z"\n      />\n    </svg>\n  );\n}\n\nfunction CartBadge({ dark }) {\n  const { totalQuantity } = useCart();\n\n  if (totalQuantity < 1) {\n    return null;\n  }\n  return (\n    <div\n      className={`${\n        dark ? "text-black bg-white" : "text-white bg-black"\n      } absolute bottom-1 right-1 text-[0.625rem] font-medium subpixel-antialiased h-3 min-w-[0.75rem] flex items-center justify-center leading-none text-center rounded-full w-auto px-[0.125rem] pb-px`}\n    >\n      <span>{totalQuantity}</span>\n    </div>\n  );\n}\n')),(0,r.yg)("h2",{id:"step-6-add-an-add-to-cart-button-to-the-product-page"},'Step 6: Add an "Add to cart" button to the product page'),(0,r.yg)("p",null,"Now that you\u2019ve built a cart context with a functioning cart, you can update the product details page to offer an ",(0,r.yg)("strong",{parentName:"p"},"Add to cart")," button."),(0,r.yg)("p",null,"Replace the ",(0,r.yg)("inlineCode",{parentName:"p"},"BuyNowButton")," logic with a ",(0,r.yg)("inlineCode",{parentName:"p"},"PurchaseMarkup")," component and add an ",(0,r.yg)("strong",{parentName:"p"},"Add to cart")," button:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'// /src/components/ProductDetails.client.jsx\n\nimport {\n  ProductOptionsProvider,\n  MediaFile,\n  useProductOptions,\n  ProductPrice,\n  BuyNowButton,\n  AddToCartButton,\n} from "@shopify/hydrogen";\n\nexport default function ProductDetails({ product }) {\n  return (\n    <ProductOptionsProvider data={product}>\n      <section className="w-full overflow-x-hidden gap-4 md:gap-8 grid px-6 md:px-8 lg:px-12">\n        <div className="grid items-start gap-6 lg:gap-20 md:grid-cols-2 lg:grid-cols-3">\n          <div className="grid md:grid-flow-row  md:p-0 md:overflow-x-auto md:grid-cols-2 md:w-full lg:col-span-2">\n            <div className="md:col-span-2 snap-center card-image aspect-square md:w-full w-[80vw] shadow rounded">\n              <ProductGallery media={product.media.nodes} />\n            </div>\n          </div>\n          <div className="sticky md:mx-auto max-w-xl md:max-w-[24rem] grid gap-8 p-0 md:p-6 md:px-0 top-[6rem] lg:top-[8rem] xl:top-[10rem]">\n            <div className="grid gap-2">\n              <h1 className="text-4xl font-bold leading-10 whitespace-normal">\n                {product.title}\n              </h1>\n              <span className="max-w-prose whitespace-pre-wrap inherit text-copy opacity-50 font-medium">\n                {product.vendor}\n              </span>\n            </div>\n            <ProductForm product={product} />\n            <div className="mt-8">\n              <div\n                className="prose border-t border-gray-200 pt-6 text-black text-md"\n                dangerouslySetInnerHTML={{ __html: product.descriptionHtml }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </ProductOptionsProvider>\n  );\n}\n\nfunction ProductForm({ product }) {\n  const { options, selectedVariant } = useProductOptions();\n\n  return (\n    <form className="grid gap-10">\n      {\n        <div className="grid gap-4">\n          {options.map(({ name, values }) => {\n            if (values.length === 1) {\n              return null;\n            }\n            return (\n              <div\n                key={name}\n                className="flex flex-wrap items-baseline justify-start gap-6"\n              >\n                <legend className="whitespace-pre-wrap max-w-prose font-bold text-lead min-w-[4rem]">\n                  {name}\n                </legend>\n                <div className="flex flex-wrap items-baseline gap-4">\n                  <OptionRadio name={name} values={values} />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      }\n      <div>\n        <ProductPrice\n          className="text-gray-500 line-through text-lg font-semibold"\n          priceType="compareAt"\n          variantId={selectedVariant.id}\n          data={product}\n        />\n        <ProductPrice\n          className="text-gray-900 text-lg font-semibold"\n          variantId={selectedVariant.id}\n          data={product}\n        />\n      </div>\n      <div className="grid items-stretch gap-4">\n        <PurchaseMarkup />\n      </div>\n    </form>\n  );\n}\n\nfunction PurchaseMarkup() {\n  const { selectedVariant } = useProductOptions();\n  const isOutOfStock = !selectedVariant?.availableForSale || false;\n\n  return (\n    <>\n      <AddToCartButton\n        type="button"\n        variantId={selectedVariant.id}\n        quantity={1}\n        accessibleAddingToCartLabel="Adding item to your cart"\n        disabled={isOutOfStock}\n      >\n        <span className="bg-black text-white inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none w-full">\n          {isOutOfStock ? "Sold out" : "Add to cart"}\n        </span>\n      </AddToCartButton>\n      {isOutOfStock ? (\n        <span className="text-black text-center py-3 px-6 border rounded-sm leading-none ">\n          Available in 2-3 weeks\n        </span>\n      ) : (\n        <BuyNowButton variantId={selectedVariant.id}>\n          <span className="inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none border w-full">\n            Buy it now\n          </span>\n        </BuyNowButton>\n      )}\n    </>\n  );\n}\n\nfunction OptionRadio({ values, name }) {\n  const { selectedOptions, setSelectedOption } = useProductOptions();\n\n  return (\n    <>\n      {values.map((value) => {\n        const checked = selectedOptions[name] === value;\n        const id = `option-${name}-${value}`;\n\n        return (\n          <label key={id} htmlFor={id}>\n            <input\n              className="sr-only"\n              type="radio"\n              id={id}\n              name={`option[${name}]`}\n              value={value}\n              checked={checked}\n              onChange={() => setSelectedOption(name, value)}\n            />\n            <div\n              className={`leading-none border-b-[2px] py-1 cursor-pointer transition-all duration-200 ${\n                checked ? "border-gray-500" : "border-neutral-50"\n              }`}\n            >\n              {value}\n            </div>\n          </label>\n        );\n      })}\n    </>\n  );\n}\n\nfunction ProductGallery({ media }) {\n  if (!media.length) {\n    return null;\n  }\n\n  return (\n    <div\n      className={`grid gap-4 overflow-x-scroll grid-flow-col md:grid-flow-row  md:p-0 md:overflow-x-auto md:grid-cols-2 w-screen md:w-full lg:col-span-2`}\n    >\n      {media.map((med, i) => {\n        let extraProps = {};\n\n        if (med.mediaContentType === "MODEL_3D") {\n          extraProps = {\n            interactionPromptThreshold: "0",\n            ar: true,\n            loading: "eager",\n            disableZoom: true,\n          };\n        }\n\n        const data = {\n          ...med,\n          image: {\n            ...med.image,\n            altText: med.alt || "Product image",\n          },\n        };\n\n        return (\n          <div\n            className={`${\n              i % 3 === 0 ? "md:col-span-2" : "md:col-span-1"\n            } snap-center card-image bg-white aspect-square md:w-full w-[80vw] shadow-sm rounded`}\n            key={med.id || med.image.id}\n          >\n            <MediaFile\n              tabIndex="0"\n              className={`w-full h-full aspect-square object-cover`}\n              data={data}\n              options={{\n                crop: "center",\n              }}\n              {...extraProps}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n')),(0,r.yg)("p",null,"The product details page now includes an ",(0,r.yg)("strong",{parentName:"p"},"Add to cart")," button:"),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/product-details-add-to-cart.png",alt:"A product details page with the add to cart button"})),(0,r.yg)("p",null,"If you add a product to your cart, and click the cart icon, then the product displays in the cart section:"),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://shopify.dev/assets/custom-storefronts/hydrogen/add-product-to-cart.png",alt:"A product that has been added to a cart"})),(0,r.yg)("h2",{id:"next-steps"},"Next steps"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Explore the source code of the ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/Shopify/hydrogen/tree/main/templates/demo-store"},"example Hydrogen demo store")," in GitHub."),(0,r.yg)("li",{parentName:"ul"},"Get familiar with ",(0,r.yg)("a",{parentName:"li",href:"/tutorials/react-server-components/"},"React Server Components"),"."),(0,r.yg)("li",{parentName:"ul"},"Learn more about the ",(0,r.yg)("a",{parentName:"li",href:"https://shopify.dev/docs/api/hydrogen"},"Shopify-specific commerce components, hooks, and utilities")," included in Hydrogen."),(0,r.yg)("li",{parentName:"ul"},"Build your own API using ",(0,r.yg)("a",{parentName:"li",href:"/hydrogen-v1/tutorials/routing/#api-routes"},"API routes"),".")))}u.isMDXComponent=!0}}]);